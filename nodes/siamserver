#!/usr/bin/env python

from SiamMask.tools.rosdemo import demo_ros
import rospy
import actionlib
from mps_msgs.msg import *
import cv2
from cv_bridge import CvBridge, CvBridgeError

def callback(box):
    rospy.loginfo(rospy.get_caller_id() + "Received: %f %f %f %f", box.xmin, box.ymin, box.xmax, box.ymax)
    demo_ros(box)

class SiamMaskAction(object):
    # TrackBBoxAction: 
    # goal:
    # sensor_msgs/Image[] video
    # mps_msgs/AABBox2d bbox
    # ---
    # result:
    # sensor_msgs/Image[] mask
    # ---
    # feedback:
    # float32 progress

    _feedback = mps_msgs.msg.TrackBBoxActionFeedback()
    _result = mps_msgs.msg.TrackBBoxActionResult()

    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, mps_msgs.msg.TrackBBoxAction, execute_cb=self.execute_cb, auto_start = False)
        self._as.start()

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)
        success = True
        
        # append the seeds for the fibonacci sequence
        # self._feedback.sequence = []
        # self._feedback.sequence.append(0)
        # self._feedback.sequence.append(1)
        
        # publish info to the console for the user
        # rospy.loginfo('%s: Executing, creating fibonacci sequence of order %i with seeds %i, %i' % (self._action_name, goal.order, self._feedback.sequence[0], self._feedback.sequence[1]))
        
        # start executing the action
        # for i in range(1, goal.order):
        #     # check that preempt has not been requested by the client
        #     if self._as.is_preempt_requested():
        #         rospy.loginfo('%s: Preempted' % self._action_name)
        #         self._as.set_preempted()
        #         success = False
        #         break
        #     self._feedback.sequence.append(self._feedback.sequence[i] + self._feedback.sequence[i-1])
        #     # publish the feedback
        #     self._as.publish_feedback(self._feedback)
        #     # # this step is not necessary, the sequence is computed at 1 Hz for demonstration purposes
        #     # r.sleep()

        ims = []
        bridge = CvBridge()
        print(type(goal.video))
        for im in goal.video:
            print(type(im)) # type(im) = sensor_msgs.msg._Image.Image
            cv_image = bridge.imgmsg_to_cv2(img_msg=im, desired_encoding="passthrough")
            ims.append(cv_image)
        print(goal.bbox.xmin, goal.bbox.xmax)

        # bbox = AABBox2d()
        # bbox.xmin = 500
        # bbox.xmax = 900
        # bbox.ymin = 500
        # bbox.ymax = 800
        # demo_ros(bbox, ims)
        demo_ros(goal.bbox, ims)

        # if success:
            # self._result.sequence = self._feedback.sequence
            # rospy.loginfo('%s: Succeeded' % self._action_name)
            # self._as.set_succeeded(self._result)


if __name__== '__main__':
    rospy.init_node('TrackBBox', anonymous=True)

    server = SiamMaskAction('TrackBBox')

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()
