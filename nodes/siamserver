#!/usr/bin/env python

from SiamMask.tools.rosdemo import demo_ros
import rospy
import actionlib
from mps_msgs.msg import *
import cv2
from cv_bridge import CvBridge, CvBridgeError

def callback(box):
    rospy.loginfo(rospy.get_caller_id() + "Received: %f %f %f %f", box.xmin, box.ymin, box.xmax, box.ymax)
    demo_ros(box)

class SiamMaskAction(object):
    _feedback = mps_msgs.msg.TrackBBoxActionFeedback()
    _result = mps_msgs.msg.TrackBBoxActionResult()

    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, mps_msgs.msg.TrackBBoxAction, execute_cb=self.execute_cb, auto_start = False)
        self._as.start()

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)
        success = True
        
        ims = []
        bridge = CvBridge()
        # print(type(goal.video))
        for im in goal.video:
            # type(im) = sensor_msgs.msg._Image.Image
            cv_image = bridge.imgmsg_to_cv2(img_msg=im, desired_encoding="passthrough")
            ims.append(cv_image)
        print("Bounding Box x = ", goal.bbox.xmin, goal.bbox.xmax)
        print("Bounding Box y = ", goal.bbox.ymin, goal.bbox.ymax)

        maskVideo = demo_ros(goal.bbox, ims)
        outmsg = []
        for im in maskVideo:
            imgmsg = bridge.cv2_to_imgmsg(im, encoding="passthrough")
            outmsg.append(imgmsg)
        
        if success:
            self._result.result.mask = outmsg
            rospy.loginfo('%s: Succeeded' % self._action_name)
            self._as.set_succeeded(self._result.result)


if __name__== '__main__':
    rospy.init_node('TrackBBox', anonymous=True)

    server = SiamMaskAction('TrackBBox')

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()
